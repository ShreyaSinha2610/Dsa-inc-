//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution{
  public:
    //Function to fill the array elements into a hash table 
    //using Linear Probing to handle collisions.
    vector<int> linearProbing(int hashSize, int arr[], int sizeOfArray)
    {
        //Your code here
        vector<int> hash(hashSize , -1);
        int insertedElement = 0;
        for(int i = 0 ; i<sizeOfArray ; i++){
            int num = arr[i];
            int index = num%hashSize;
            int Ci = index;
            while(hash[index] != -1 && hash[index] != num){
                index = (index + 1)%hashSize;
                if(index == Ci){
                    break;
                }
            }
            if(hash[index] == -1){
                hash[index] = arr[i];
                insertedElement++;
            }
            if(insertedElement == hashSize){
                break;
            }
        }
        return hash;
    }

};

//{ Driver Code Starts.
int main() {
	int t;
	cin>>t;
	while(t--)
	{
	    int hashSize;
	    cin>>hashSize;
	    
	    int  sizeOfArray;
	    cin>>sizeOfArray;
	    int arr[sizeOfArray];
	    
	    for(int i=0;i<sizeOfArray;i++)
	    cin>>arr[i];
	    
	    vector<int> hash;
	    Solution obj;
	    hash = obj.linearProbing( hashSize, arr, sizeOfArray);
	    
	    for(int i=0;i<hashSize;i++)
	    cout<<hash[i]<<" ";
	    
	    cout<<endl;
	    
	    
	}
	return 0;
}


// } Driver Code Ends
